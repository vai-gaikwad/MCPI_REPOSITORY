
day7_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00001578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000574  08000574  00001574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001578  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001292  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000052d  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00002d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a4  00000000  00000000  00002e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182fd  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014e1  00000000  00000000  0001b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008beca  00000000  00000000  0001c6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a85ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000254  00000000  00000000  000a85f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000a8863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000558 	.word	0x08000558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000558 	.word	0x08000558

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	SystemInit();
 80001ce:	f000 f8ad 	bl	800032c <SystemInit>
	SwitchInit(SWITCH);
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 f834 	bl	8000240 <SwitchInit>
	UartInit(BAUD_9600);
 80001d8:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80001dc:	f000 f8dc 	bl	8000398 <UartInit>
	uint8_t num=0;
 80001e0:	2300      	movs	r3, #0
 80001e2:	71fb      	strb	r3, [r7, #7]
	//char str[32]={'1','2','3','4','5'};

	while(1) {

			while(exti0_flag == 0)
 80001e4:	bf00      	nop
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <main+0x3c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0fb      	beq.n	80001e6 <main+0x1e>
				;
		   	num++;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3301      	adds	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
			UartPuts(num);
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 f952 	bl	80004a0 <UartPuts>
			exti0_flag = 0;
 80001fc:	4b01      	ldr	r3, [pc, #4]	@ (8000204 <main+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
			while(exti0_flag == 0)
 8000202:	e7ef      	b.n	80001e4 <main+0x1c>
 8000204:	2000001c 	.word	0x2000001c

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4906      	ldr	r1, [pc, #24]	@ (800023c <__NVIC_EnableIRQ+0x34>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <SwitchInit>:
 *      Author: vai
 */

#include "switch.h"

void SwitchInit(uint32_t pin) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 8000248:	4b2a      	ldr	r3, [pc, #168]	@ (80002f4 <SwitchInit+0xb4>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024c:	4a29      	ldr	r2, [pc, #164]	@ (80002f4 <SwitchInit+0xb4>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000254:	4b28      	ldr	r3, [pc, #160]	@ (80002f8 <SwitchInit+0xb8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	0052      	lsls	r2, r2, #1
 800025c:	3201      	adds	r2, #1
 800025e:	2101      	movs	r1, #1
 8000260:	4091      	lsls	r1, r2
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	2001      	movs	r0, #1
 8000268:	fa00 f202 	lsl.w	r2, r0, r2
 800026c:	430a      	orrs	r2, r1
 800026e:	43d2      	mvns	r2, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a21      	ldr	r2, [pc, #132]	@ (80002f8 <SwitchInit+0xb8>)
 8000274:	400b      	ands	r3, r1
 8000276:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000278:	4b1f      	ldr	r3, [pc, #124]	@ (80002f8 <SwitchInit+0xb8>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	3201      	adds	r2, #1
 8000282:	2101      	movs	r1, #1
 8000284:	4091      	lsls	r1, r2
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	2001      	movs	r0, #1
 800028c:	fa00 f202 	lsl.w	r2, r0, r2
 8000290:	430a      	orrs	r2, r1
 8000292:	43d2      	mvns	r2, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a18      	ldr	r2, [pc, #96]	@ (80002f8 <SwitchInit+0xb8>)
 8000298:	400b      	ands	r3, r1
 800029a:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800029c:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <SwitchInit+0xb8>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	0052      	lsls	r2, r2, #1
 80002a4:	3201      	adds	r2, #1
 80002a6:	2101      	movs	r1, #1
 80002a8:	4091      	lsls	r1, r2
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	2001      	movs	r0, #1
 80002b0:	fa00 f202 	lsl.w	r2, r0, r2
 80002b4:	430a      	orrs	r2, r1
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a0f      	ldr	r2, [pc, #60]	@ (80002f8 <SwitchInit+0xb8>)
 80002bc:	400b      	ands	r3, r1
 80002be:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <SwitchInit+0xbc>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a0d      	ldr	r2, [pc, #52]	@ (80002fc <SwitchInit+0xbc>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 80002cc:	4b0b      	ldr	r3, [pc, #44]	@ (80002fc <SwitchInit+0xbc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0a      	ldr	r2, [pc, #40]	@ (80002fc <SwitchInit+0xbc>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002d8:	4b09      	ldr	r3, [pc, #36]	@ (8000300 <SwitchInit+0xc0>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a08      	ldr	r2, [pc, #32]	@ (8000300 <SwitchInit+0xc0>)
 80002de:	f023 030f 	bic.w	r3, r3, #15
 80002e2:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 80002e4:	2006      	movs	r0, #6
 80002e6:	f7ff ff8f 	bl	8000208 <__NVIC_EnableIRQ>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40013c00 	.word	0x40013c00
 8000300:	40013800 	.word	0x40013800

08000304 <EXTI0_IRQHandler>:

// Global flag for interrupt
volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <EXTI0_IRQHandler+0x20>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <EXTI0_IRQHandler+0x20>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 8000314:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <EXTI0_IRQHandler+0x24>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40013c00 	.word	0x40013c00
 8000328:	2000001c 	.word	0x2000001c

0800032c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000330:	f000 f802 	bl	8000338 <DWT_Init>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}

08000338 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800033c:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <DWT_Init+0x58>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <DWT_Init+0x58>)
 8000342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000346:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <DWT_Init+0x58>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a10      	ldr	r2, [pc, #64]	@ (8000390 <DWT_Init+0x58>)
 800034e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000352:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <DWT_Init+0x5c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <DWT_Init+0x5c>)
 800035a:	f023 0301 	bic.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <DWT_Init+0x5c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <DWT_Init+0x5c>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <DWT_Init+0x5c>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000372:	bf00      	nop
    __ASM volatile ("NOP");
 8000374:	bf00      	nop
    __ASM volatile ("NOP");
 8000376:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <DWT_Init+0x5c>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	e000edf0 	.word	0xe000edf0
 8000394:	e0001000 	.word	0xe0001000

08000398 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80003a0:	4b31      	ldr	r3, [pc, #196]	@ (8000468 <UartInit+0xd0>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	4a30      	ldr	r2, [pc, #192]	@ (8000468 <UartInit+0xd0>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80003ac:	4b2f      	ldr	r3, [pc, #188]	@ (800046c <UartInit+0xd4>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a2e      	ldr	r2, [pc, #184]	@ (800046c <UartInit+0xd4>)
 80003b2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80003b6:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80003b8:	4b2c      	ldr	r3, [pc, #176]	@ (800046c <UartInit+0xd4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a2b      	ldr	r2, [pc, #172]	@ (800046c <UartInit+0xd4>)
 80003be:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80003c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80003c4:	4b29      	ldr	r3, [pc, #164]	@ (800046c <UartInit+0xd4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a28      	ldr	r2, [pc, #160]	@ (800046c <UartInit+0xd4>)
 80003ca:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80003d0:	4b26      	ldr	r3, [pc, #152]	@ (800046c <UartInit+0xd4>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a25      	ldr	r2, [pc, #148]	@ (800046c <UartInit+0xd4>)
 80003d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80003da:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80003dc:	4b23      	ldr	r3, [pc, #140]	@ (800046c <UartInit+0xd4>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a22      	ldr	r2, [pc, #136]	@ (800046c <UartInit+0xd4>)
 80003e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80003e6:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80003e8:	4b20      	ldr	r3, [pc, #128]	@ (800046c <UartInit+0xd4>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4a1f      	ldr	r2, [pc, #124]	@ (800046c <UartInit+0xd4>)
 80003ee:	f023 030c 	bic.w	r3, r3, #12
 80003f2:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80003f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000468 <UartInit+0xd0>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <UartInit+0xd0>)
 80003fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003fe:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000400:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <UartInit+0xd8>)
 8000402:	220c      	movs	r2, #12
 8000404:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000406:	4b1a      	ldr	r3, [pc, #104]	@ (8000470 <UartInit+0xd8>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 800040c:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <UartInit+0xd8>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000418:	d016      	beq.n	8000448 <UartInit+0xb0>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000420:	d816      	bhi.n	8000450 <UartInit+0xb8>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000428:	d004      	beq.n	8000434 <UartInit+0x9c>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000430:	d005      	beq.n	800043e <UartInit+0xa6>
 8000432:	e00d      	b.n	8000450 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <UartInit+0xd8>)
 8000436:	f240 6283 	movw	r2, #1667	@ 0x683
 800043a:	609a      	str	r2, [r3, #8]
			break;
 800043c:	e008      	b.n	8000450 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800043e:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <UartInit+0xd8>)
 8000440:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000444:	609a      	str	r2, [r3, #8]
			break;
 8000446:	e003      	b.n	8000450 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <UartInit+0xd8>)
 800044a:	228b      	movs	r2, #139	@ 0x8b
 800044c:	609a      	str	r2, [r3, #8]
			break;
 800044e:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <UartInit+0xd8>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a06      	ldr	r2, [pc, #24]	@ (8000470 <UartInit+0xd8>)
 8000456:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800045a:	60d3      	str	r3, [r2, #12]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40023800 	.word	0x40023800
 800046c:	40020000 	.word	0x40020000
 8000470:	40004400 	.word	0x40004400

08000474 <UartPutch>:

void UartPutch(uint8_t num) {
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 800047e:	bf00      	nop
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <UartPutch+0x28>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = num;
 800048c:	4a03      	ldr	r2, [pc, #12]	@ (800049c <UartPutch+0x28>)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	6053      	str	r3, [r2, #4]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40004400 	.word	0x40004400

080004a0 <UartPuts>:
	char ch = USART2->DR;
	return ch;
}

void UartPuts(uint8_t num)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	UartPutch(num);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ffe1 	bl	8000474 <UartPutch>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	@ (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c0:	f7ff ff34 	bl	800032c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	@ (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	@ (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 f811 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff fe6b 	bl	80001c8 <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000500:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000508:	20000020 	.word	0x20000020

0800050c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	4d0d      	ldr	r5, [pc, #52]	@ (8000548 <__libc_init_array+0x38>)
 8000514:	4c0d      	ldr	r4, [pc, #52]	@ (800054c <__libc_init_array+0x3c>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	2600      	movs	r6, #0
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	4d0b      	ldr	r5, [pc, #44]	@ (8000550 <__libc_init_array+0x40>)
 8000522:	4c0c      	ldr	r4, [pc, #48]	@ (8000554 <__libc_init_array+0x44>)
 8000524:	f000 f818 	bl	8000558 <_init>
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	2600      	movs	r6, #0
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
