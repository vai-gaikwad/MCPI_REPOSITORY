
day_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001274  08001274  00002274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012fc  080012fc  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080012fc  080012fc  000022fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001304  08001304  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001304  08001304  00002304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001308  08001308  00002308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800130c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015ed  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000656  00000000  00000000  0000466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d1  00000000  00000000  00004e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001840e  00000000  00000000  00004ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001afb  00000000  00000000  0001d2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be3a  00000000  00000000  0001edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aac14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000860  00000000  00000000  000aac58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ab4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000ab4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800125c 	.word	0x0800125c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	0800125c 	.word	0x0800125c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	b09b      	sub	sp, #108	@ 0x6c
 80002c4:	af04      	add	r7, sp, #16
	char str1[50], str2[20];
	RTC_Date d, dt = { .Date = 31, .Month = 12, .Year = 23, .WeekDay = 7 };
 80002c6:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <main+0x98>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	60bb      	str	r3, [r7, #8]
	RTC_Time t, tm = { .Hours = 23, .Minutes = 59, .Seconds = 40 };
 80002cc:	4a23      	ldr	r2, [pc, #140]	@ (800035c <main+0x9c>)
 80002ce:	463b      	mov	r3, r7
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	4611      	mov	r1, r2
 80002d4:	8019      	strh	r1, [r3, #0]
 80002d6:	3302      	adds	r3, #2
 80002d8:	0c12      	lsrs	r2, r2, #16
 80002da:	701a      	strb	r2, [r3, #0]

//	char str[32];

	SystemInit();
 80002dc:	f000 fa26 	bl	800072c <SystemInit>
	UartInit(BAUD_9600);
 80002e0:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002e4:	f000 fa58 	bl	8000798 <UartInit>
	UartPuts("Enter Strings...\r\n");
 80002e8:	481d      	ldr	r0, [pc, #116]	@ (8000360 <main+0xa0>)
 80002ea:	f000 fad9 	bl	80008a0 <UartPuts>
//	LcdInit();
//	LcdPuts(LCD_LINE1, "DESD @ Sunbeam\n");
//	LcdPuts(LCD_LINE2, "STM32 RTC Demo!\n");
//	DelayMs(2000);
//	LcdWrite(LCD_CMD, LCD_CLEAR);
	RTC_Init(&dt, &tm);
 80002ee:	463a      	mov	r2, r7
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f890 	bl	800041c <RTC_Init>
	while(1) {
		RTC_GetTime(&t);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f9a4 	bl	800064c <RTC_GetTime>
		RTC_GetDate(&d);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f959 	bl	80005c0 <RTC_GetDate>
		sprintf(str1, "date = %-2d %-2d %-2d \t  time =%02d : %02d : %02d  \r", d.Date, d.Month, d.Year,t.Hours, t.Minutes, t.Seconds);
 800030e:	7b7b      	ldrb	r3, [r7, #13]
 8000310:	461d      	mov	r5, r3
 8000312:	7b3b      	ldrb	r3, [r7, #12]
 8000314:	461e      	mov	r6, r3
 8000316:	7bbb      	ldrb	r3, [r7, #14]
 8000318:	793a      	ldrb	r2, [r7, #4]
 800031a:	7979      	ldrb	r1, [r7, #5]
 800031c:	79b8      	ldrb	r0, [r7, #6]
 800031e:	4604      	mov	r4, r0
 8000320:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000324:	9403      	str	r4, [sp, #12]
 8000326:	9102      	str	r1, [sp, #8]
 8000328:	9201      	str	r2, [sp, #4]
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4633      	mov	r3, r6
 800032e:	462a      	mov	r2, r5
 8000330:	490c      	ldr	r1, [pc, #48]	@ (8000364 <main+0xa4>)
 8000332:	f000 fafb 	bl	800092c <siprintf>
	//	sprintf(str2, "%02d : %02d : %02d 	\r", t.Hours, t.Minutes, t.Seconds);
//		LcdPuts(LCD_LINE1, str1);
//		LcdPuts(LCD_LINE2, str2);
		UartPuts(str1);
 8000336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fab0 	bl	80008a0 <UartPuts>
		UartPuts(str2);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4618      	mov	r0, r3
 8000346:	f000 faab 	bl	80008a0 <UartPuts>
		DelayMs(1000);
 800034a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800034e:	f7ff ff8f 	bl	8000270 <DelayMs>
		RTC_GetTime(&t);
 8000352:	bf00      	nop
 8000354:	e7d2      	b.n	80002fc <main+0x3c>
 8000356:	bf00      	nop
 8000358:	080012c0 	.word	0x080012c0
 800035c:	080012c4 	.word	0x080012c4
 8000360:	08001274 	.word	0x08001274
 8000364:	08001288 	.word	0x08001288

08000368 <Bin2Bcd>:
 *      Author: Nilesh
 */

#include "rtc.h"

uint16_t Bin2Bcd(uint16_t val) {
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = val % 10;
 8000372:	88fa      	ldrh	r2, [r7, #6]
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <Bin2Bcd+0x68>)
 8000376:	fba3 1302 	umull	r1, r3, r3, r2
 800037a:	08d9      	lsrs	r1, r3, #3
 800037c:	460b      	mov	r3, r1
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (val / 10) % 10;
 8000388:	88fb      	ldrh	r3, [r7, #6]
 800038a:	4a11      	ldr	r2, [pc, #68]	@ (80003d0 <Bin2Bcd+0x68>)
 800038c:	fba2 2303 	umull	r2, r3, r2, r3
 8000390:	08db      	lsrs	r3, r3, #3
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <Bin2Bcd+0x68>)
 8000396:	fba3 1302 	umull	r1, r3, r3, r2
 800039a:	08d9      	lsrs	r1, r3, #3
 800039c:	460b      	mov	r3, r1
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	1ad3      	subs	r3, r2, r3
 80003a6:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = (val / 100) % 10;
//	uint16_t thousands = (val / 1000) % 10;
	uint16_t res = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	817b      	strh	r3, [r7, #10]
	res |= unit;
 80003ac:	897a      	ldrh	r2, [r7, #10]
 80003ae:	89fb      	ldrh	r3, [r7, #14]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	817b      	strh	r3, [r7, #10]
	res |= tens << 4;
 80003b4:	89bb      	ldrh	r3, [r7, #12]
 80003b6:	011b      	lsls	r3, r3, #4
 80003b8:	b21a      	sxth	r2, r3
 80003ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80003be:	4313      	orrs	r3, r2
 80003c0:	b21b      	sxth	r3, r3
 80003c2:	817b      	strh	r3, [r7, #10]
//	res |= hundreds << 8;
//	res |= thousands << 12;
	return res;
 80003c4:	897b      	ldrh	r3, [r7, #10]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	cccccccd 	.word	0xcccccccd

080003d4 <Bcd2Bin>:

uint16_t Bcd2Bin(uint16_t val) {
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	80fb      	strh	r3, [r7, #6]
	uint16_t unit = (val & 0x0F);
 80003de:	88fb      	ldrh	r3, [r7, #6]
 80003e0:	f003 030f 	and.w	r3, r3, #15
 80003e4:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = ((val >> 4) & 0x0F) * 10;
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	091b      	lsrs	r3, r3, #4
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	f003 030f 	and.w	r3, r3, #15
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	0092      	lsls	r2, r2, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	81bb      	strh	r3, [r7, #12]
//	uint16_t hundreds = ((val >> 8) & 0x0F) * 100;
//	uint16_t thousands = ((val >> 12) & 0x0F) * 1000;
	uint16_t res = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	817b      	strh	r3, [r7, #10]
	res += unit;
 8000400:	897a      	ldrh	r2, [r7, #10]
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	4413      	add	r3, r2
 8000406:	817b      	strh	r3, [r7, #10]
	res += tens;
 8000408:	897a      	ldrh	r2, [r7, #10]
 800040a:	89bb      	ldrh	r3, [r7, #12]
 800040c:	4413      	add	r3, r2
 800040e:	817b      	strh	r3, [r7, #10]
//	res += hundreds;
//	res += thousands;
	return res;
 8000410:	897b      	ldrh	r3, [r7, #10]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <RTC_Init>:


void RTC_Init(RTC_Date *dt, RTC_Time *tm) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
	// Initialize RTC
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;		//enable peripheral clock power
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <RTC_Init+0xac>)
 8000428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800042a:	4a27      	ldr	r2, [pc, #156]	@ (80004c8 <RTC_Init+0xac>)
 800042c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000430:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;			//enable access to the RTC registers (stm32 manual 5.4)
 8000432:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <RTC_Init+0xb0>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a25      	ldr	r2, [pc, #148]	@ (80004cc <RTC_Init+0xb0>)
 8000438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800043c:	6013      	str	r3, [r2, #0]

	RCC->CSR |= RCC_CSR_LSION;				//enable LSI (stm32 manual 7.3.21)
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <RTC_Init+0xac>)
 8000440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000442:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <RTC_Init+0xac>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY));	//wait for LSI ready flag
 800044a:	bf00      	nop
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <RTC_Init+0xac>)
 800044e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000450:	f003 0302 	and.w	r3, r3, #2
 8000454:	2b00      	cmp	r3, #0
 8000456:	d0f9      	beq.n	800044c <RTC_Init+0x30>

	RCC->BDCR |= RCC_BDCR_RTCEN | RCC_BDCR_RTCSEL_1;    // select LSI (32 KHz) and enable RTC (stm32 manual 7.3.21)
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <RTC_Init+0xac>)
 800045a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800045c:	4a1a      	ldr	r2, [pc, #104]	@ (80004c8 <RTC_Init+0xac>)
 800045e:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 8000462:	6713      	str	r3, [r2, #112]	@ 0x70

	RTC->WPR = 0xCA;			// enter key to unlock write protection
 8000464:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <RTC_Init+0xb4>)
 8000466:	22ca      	movs	r2, #202	@ 0xca
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;			// key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
 800046a:	4b19      	ldr	r3, [pc, #100]	@ (80004d0 <RTC_Init+0xb4>)
 800046c:	2253      	movs	r2, #83	@ 0x53
 800046e:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC->ISR |= RTC_ISR_INIT;	// enable rtc setup (i.e. register init)
 8000470:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <RTC_Init+0xb4>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a16      	ldr	r2, [pc, #88]	@ (80004d0 <RTC_Init+0xb4>)
 8000476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800047a:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));	// wait until register update is allowed
 800047c:	bf00      	nop
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <RTC_Init+0xb4>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <RTC_Init+0x62>
	//	rtc_cntrclk = rtcclk / (async div + 1) * (sync div + 1)
	//		rtc_cntrclk should be 1 Hz (for accurate timing)
	//		high async div (7-bit) => low power | sync div (15-bit)
	//		for LSI = 32KHz = 32000 Hz and rtc_cntrclk = 1 Hz,
	//			if async div = 128, then sync div = 250
	RTC->PRER = ((128-1) << RTC_PRER_PREDIV_A_Pos) | ((250-1) << RTC_PRER_PREDIV_S_Pos);
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <RTC_Init+0xb4>)
 800048c:	4a11      	ldr	r2, [pc, #68]	@ (80004d4 <RTC_Init+0xb8>)
 800048e:	611a      	str	r2, [r3, #16]

	RTC_SetDate(dt);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 f821 	bl	80004d8 <RTC_SetDate>
	RTC_SetTime(tm);
 8000496:	6838      	ldr	r0, [r7, #0]
 8000498:	f000 f85c 	bl	8000554 <RTC_SetTime>

	RTC->CR |= RTC_CR_BYPSHAD;		// rtc date/time should be read from calendar registers (not shadow registers)
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <RTC_Init+0xb4>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a0b      	ldr	r2, [pc, #44]	@ (80004d0 <RTC_Init+0xb4>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;		// rtc is free running now (not in initialization mode)
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <RTC_Init+0xb4>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	4a08      	ldr	r2, [pc, #32]	@ (80004d0 <RTC_Init+0xb4>)
 80004ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004b2:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;			// disable access to RTC registers (write protection)
 80004b4:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <RTC_Init+0xb0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <RTC_Init+0xb0>)
 80004ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40023800 	.word	0x40023800
 80004cc:	40007000 	.word	0x40007000
 80004d0:	40002800 	.word	0x40002800
 80004d4:	007f00f9 	.word	0x007f00f9

080004d8 <RTC_SetDate>:

void RTC_SetDate(RTC_Date *dt) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint8_t date = Bin2Bcd(dt->Date);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	785b      	ldrb	r3, [r3, #1]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff3f 	bl	8000368 <Bin2Bcd>
 80004ea:	4603      	mov	r3, r0
 80004ec:	73fb      	strb	r3, [r7, #15]
	uint8_t month = Bin2Bcd(dt->Month);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff38 	bl	8000368 <Bin2Bcd>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73bb      	strb	r3, [r7, #14]
	uint8_t year = Bin2Bcd(dt->Year);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff31 	bl	8000368 <Bin2Bcd>
 8000506:	4603      	mov	r3, r0
 8000508:	737b      	strb	r3, [r7, #13]
	uint8_t weekday = Bin2Bcd(dt->WeekDay);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	78db      	ldrb	r3, [r3, #3]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ff2a 	bl	8000368 <Bin2Bcd>
 8000514:	4603      	mov	r3, r0
 8000516:	733b      	strb	r3, [r7, #12]
	uint32_t dr = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
	dr |= year << RTC_DR_YU_Pos;
 800051c:	7b7b      	ldrb	r3, [r7, #13]
 800051e:	041b      	lsls	r3, r3, #16
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	4313      	orrs	r3, r2
 8000524:	60bb      	str	r3, [r7, #8]
	dr |= weekday << RTC_DR_WDU_Pos;
 8000526:	7b3b      	ldrb	r3, [r7, #12]
 8000528:	035b      	lsls	r3, r3, #13
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	4313      	orrs	r3, r2
 800052e:	60bb      	str	r3, [r7, #8]
	dr |= month << RTC_DR_MU_Pos;
 8000530:	7bbb      	ldrb	r3, [r7, #14]
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	4313      	orrs	r3, r2
 8000538:	60bb      	str	r3, [r7, #8]
	dr |= date << RTC_DR_DU_Pos;
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	4313      	orrs	r3, r2
 8000540:	60bb      	str	r3, [r7, #8]
	RTC->DR = dr;
 8000542:	4a03      	ldr	r2, [pc, #12]	@ (8000550 <RTC_SetDate+0x78>)
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	6053      	str	r3, [r2, #4]
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40002800 	.word	0x40002800

08000554 <RTC_SetTime>:

void RTC_SetTime(RTC_Time *tm) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint8_t hrs = Bin2Bcd(tm->Hours);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff01 	bl	8000368 <Bin2Bcd>
 8000566:	4603      	mov	r3, r0
 8000568:	73fb      	strb	r3, [r7, #15]
	uint8_t min = Bin2Bcd(tm->Minutes);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fefa 	bl	8000368 <Bin2Bcd>
 8000574:	4603      	mov	r3, r0
 8000576:	73bb      	strb	r3, [r7, #14]
	uint8_t sec = Bin2Bcd(tm->Seconds);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fef3 	bl	8000368 <Bin2Bcd>
 8000582:	4603      	mov	r3, r0
 8000584:	737b      	strb	r3, [r7, #13]
	uint32_t tr = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
	tr |= hrs << RTC_TR_HU_Pos;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
	tr |= min << RTC_TR_MNU_Pos;
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	4313      	orrs	r3, r2
 800059c:	60bb      	str	r3, [r7, #8]
	tr |= sec << RTC_TR_SU_Pos;
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	60bb      	str	r3, [r7, #8]
	tr &= ~RTC_TR_PM; // 24-hours mode
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80005ac:	60bb      	str	r3, [r7, #8]
	RTC->TR = tr;
 80005ae:	4a03      	ldr	r2, [pc, #12]	@ (80005bc <RTC_SetTime+0x68>)
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40002800 	.word	0x40002800

080005c0 <RTC_GetDate>:

void RTC_GetDate(RTC_Date *dt) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <RTC_GetDate+0x88>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
	uint8_t val = (dr & (RTC_DR_DT_Msk | RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005d6:	72fb      	strb	r3, [r7, #11]
	dt->Date = Bcd2Bin(val);
 80005d8:	7afb      	ldrb	r3, [r7, #11]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fef9 	bl	80003d4 <Bcd2Bin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	705a      	strb	r2, [r3, #1]
	val = (dr & (RTC_DR_MT_Msk | RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	72fb      	strb	r3, [r7, #11]
	dt->Month = Bcd2Bin(val);
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff feea 	bl	80003d4 <Bcd2Bin>
 8000600:	4603      	mov	r3, r0
 8000602:	b2da      	uxtb	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	701a      	strb	r2, [r3, #0]
	val = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	0c1b      	lsrs	r3, r3, #16
 800060c:	72fb      	strb	r3, [r7, #11]
	dt->Year = Bcd2Bin(val);
 800060e:	7afb      	ldrb	r3, [r7, #11]
 8000610:	b29b      	uxth	r3, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fede 	bl	80003d4 <Bcd2Bin>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	709a      	strb	r2, [r3, #2]
	val = (dr & (RTC_DR_WDU_Msk)) >> RTC_DR_WDU_Pos;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	0b5b      	lsrs	r3, r3, #13
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	72fb      	strb	r3, [r7, #11]
	dt->WeekDay = Bcd2Bin(val);
 800062c:	7afb      	ldrb	r3, [r7, #11]
 800062e:	b29b      	uxth	r3, r3
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fecf 	bl	80003d4 <Bcd2Bin>
 8000636:	4603      	mov	r3, r0
 8000638:	b2da      	uxtb	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	70da      	strb	r2, [r3, #3]
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40002800 	.word	0x40002800

0800064c <RTC_GetTime>:

void RTC_GetTime(RTC_Time *tm) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint32_t tr = RTC->TR;
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <RTC_GetTime+0x70>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
	uint8_t val = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000664:	72fb      	strb	r3, [r7, #11]
	tm->Hours = Bcd2Bin(val);
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	b29b      	uxth	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff feb2 	bl	80003d4 <Bcd2Bin>
 8000670:	4603      	mov	r3, r0
 8000672:	b2da      	uxtb	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
	val = (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000682:	72fb      	strb	r3, [r7, #11]
	tm->Minutes = Bcd2Bin(val);
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	b29b      	uxth	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fea3 	bl	80003d4 <Bcd2Bin>
 800068e:	4603      	mov	r3, r0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	705a      	strb	r2, [r3, #1]
	val = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800069e:	72fb      	strb	r3, [r7, #11]
	tm->Seconds = Bcd2Bin(val);
 80006a0:	7afb      	ldrb	r3, [r7, #11]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fe95 	bl	80003d4 <Bcd2Bin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	709a      	strb	r2, [r3, #2]
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40002800 	.word	0x40002800

080006c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c8:	4a14      	ldr	r2, [pc, #80]	@ (800071c <_sbrk+0x5c>)
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <_sbrk+0x60>)
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <_sbrk+0x64>)
 80006de:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <_sbrk+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e2:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <_sbrk+0x64>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d207      	bcs.n	8000700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f0:	f000 f93c 	bl	800096c <__errno>
 80006f4:	4603      	mov	r3, r0
 80006f6:	220c      	movs	r2, #12
 80006f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fe:	e009      	b.n	8000714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <_sbrk+0x64>)
 8000710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000712:	68fb      	ldr	r3, [r7, #12]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20020000 	.word	0x20020000
 8000720:	00000400 	.word	0x00000400
 8000724:	20000070 	.word	0x20000070
 8000728:	200001c0 	.word	0x200001c0

0800072c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000730:	f000 f802 	bl	8000738 <DWT_Init>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <DWT_Init+0x58>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a13      	ldr	r2, [pc, #76]	@ (8000790 <DWT_Init+0x58>)
 8000742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000746:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <DWT_Init+0x58>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a10      	ldr	r2, [pc, #64]	@ (8000790 <DWT_Init+0x58>)
 800074e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000752:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <DWT_Init+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	@ (8000794 <DWT_Init+0x5c>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <DWT_Init+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <DWT_Init+0x5c>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <DWT_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000772:	bf00      	nop
    __ASM volatile ("NOP");
 8000774:	bf00      	nop
    __ASM volatile ("NOP");
 8000776:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <DWT_Init+0x5c>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf0c      	ite	eq
 8000780:	2301      	moveq	r3, #1
 8000782:	2300      	movne	r3, #0
 8000784:	b2db      	uxtb	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000edf0 	.word	0xe000edf0
 8000794:	e0001000 	.word	0xe0001000

08000798 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 80007a0:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <UartInit+0xd0>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	4a30      	ldr	r2, [pc, #192]	@ (8000868 <UartInit+0xd0>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 80007ac:	4b2f      	ldr	r3, [pc, #188]	@ (800086c <UartInit+0xd4>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	4a2e      	ldr	r2, [pc, #184]	@ (800086c <UartInit+0xd4>)
 80007b2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80007b6:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 80007b8:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <UartInit+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a2b      	ldr	r2, [pc, #172]	@ (800086c <UartInit+0xd4>)
 80007be:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80007c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <UartInit+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a28      	ldr	r2, [pc, #160]	@ (800086c <UartInit+0xd4>)
 80007ca:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80007ce:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <UartInit+0xd4>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	4a25      	ldr	r2, [pc, #148]	@ (800086c <UartInit+0xd4>)
 80007d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007da:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <UartInit+0xd4>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a22      	ldr	r2, [pc, #136]	@ (800086c <UartInit+0xd4>)
 80007e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007e6:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <UartInit+0xd4>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <UartInit+0xd4>)
 80007ee:	f023 030c 	bic.w	r3, r3, #12
 80007f2:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <UartInit+0xd0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <UartInit+0xd0>)
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <UartInit+0xd8>)
 8000802:	220c      	movs	r2, #12
 8000804:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <UartInit+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <UartInit+0xd8>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000818:	d016      	beq.n	8000848 <UartInit+0xb0>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000820:	d816      	bhi.n	8000850 <UartInit+0xb8>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000828:	d004      	beq.n	8000834 <UartInit+0x9c>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000830:	d005      	beq.n	800083e <UartInit+0xa6>
 8000832:	e00d      	b.n	8000850 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <UartInit+0xd8>)
 8000836:	f240 6283 	movw	r2, #1667	@ 0x683
 800083a:	609a      	str	r2, [r3, #8]
			break;
 800083c:	e008      	b.n	8000850 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <UartInit+0xd8>)
 8000840:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000844:	609a      	str	r2, [r3, #8]
			break;
 8000846:	e003      	b.n	8000850 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <UartInit+0xd8>)
 800084a:	228b      	movs	r2, #139	@ 0x8b
 800084c:	609a      	str	r2, [r3, #8]
			break;
 800084e:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <UartInit+0xd8>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <UartInit+0xd8>)
 8000856:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40004400 	.word	0x40004400

08000874 <UartPutch>:

void UartPutch(uint8_t ch) {
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 800087e:	bf00      	nop
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <UartPutch+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f9      	beq.n	8000880 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 800088c:	4a03      	ldr	r2, [pc, #12]	@ (800089c <UartPutch+0x28>)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	6053      	str	r3, [r2, #4]
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40004400 	.word	0x40004400

080008a0 <UartPuts>:
	// read received byte from RDR
	char ch = USART2->DR;
	return ch;
}

void UartPuts(char str[]) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	e009      	b.n	80008c2 <UartPuts+0x22>
		UartPutch(str[i]);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffdc 	bl	8000874 <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1ef      	bne.n	80008ae <UartPuts+0xe>
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	@ (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008dc:	f7ff ff26 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f000 f837 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fcd9 	bl	80002c0 <main>

0800090e <LoopForever>:

LoopForever:
  b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800091c:	0800130c 	.word	0x0800130c
  ldr r2, =_sbss
 8000920:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000924:	200001bc 	.word	0x200001bc

08000928 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <siprintf>:
 800092c:	b40e      	push	{r1, r2, r3}
 800092e:	b500      	push	{lr}
 8000930:	b09c      	sub	sp, #112	@ 0x70
 8000932:	ab1d      	add	r3, sp, #116	@ 0x74
 8000934:	9002      	str	r0, [sp, #8]
 8000936:	9006      	str	r0, [sp, #24]
 8000938:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <siprintf+0x38>)
 800093e:	9107      	str	r1, [sp, #28]
 8000940:	9104      	str	r1, [sp, #16]
 8000942:	4909      	ldr	r1, [pc, #36]	@ (8000968 <siprintf+0x3c>)
 8000944:	f853 2b04 	ldr.w	r2, [r3], #4
 8000948:	9105      	str	r1, [sp, #20]
 800094a:	6800      	ldr	r0, [r0, #0]
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	a902      	add	r1, sp, #8
 8000950:	f000 f98c 	bl	8000c6c <_svfiprintf_r>
 8000954:	9b02      	ldr	r3, [sp, #8]
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	b01c      	add	sp, #112	@ 0x70
 800095c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000960:	b003      	add	sp, #12
 8000962:	4770      	bx	lr
 8000964:	20000004 	.word	0x20000004
 8000968:	ffff0208 	.word	0xffff0208

0800096c <__errno>:
 800096c:	4b01      	ldr	r3, [pc, #4]	@ (8000974 <__errno+0x8>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000004 	.word	0x20000004

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4d0d      	ldr	r5, [pc, #52]	@ (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	@ (80009b4 <__libc_init_array+0x3c>)
 800097e:	1b64      	subs	r4, r4, r5
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2600      	movs	r6, #0
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4d0b      	ldr	r5, [pc, #44]	@ (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	@ (80009bc <__libc_init_array+0x44>)
 800098c:	f000 fc66 	bl	800125c <_init>
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2600      	movs	r6, #0
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	08001304 	.word	0x08001304
 80009b4:	08001304 	.word	0x08001304
 80009b8:	08001304 	.word	0x08001304
 80009bc:	08001308 	.word	0x08001308

080009c0 <__retarget_lock_acquire_recursive>:
 80009c0:	4770      	bx	lr

080009c2 <__retarget_lock_release_recursive>:
 80009c2:	4770      	bx	lr

080009c4 <_free_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4605      	mov	r5, r0
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d041      	beq.n	8000a50 <_free_r+0x8c>
 80009cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009d0:	1f0c      	subs	r4, r1, #4
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfb8      	it	lt
 80009d6:	18e4      	addlt	r4, r4, r3
 80009d8:	f000 f8e0 	bl	8000b9c <__malloc_lock>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <_free_r+0x90>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	b933      	cbnz	r3, 80009f0 <_free_r+0x2c>
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	6014      	str	r4, [r2, #0]
 80009e6:	4628      	mov	r0, r5
 80009e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ec:	f000 b8dc 	b.w	8000ba8 <__malloc_unlock>
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d908      	bls.n	8000a06 <_free_r+0x42>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	1821      	adds	r1, r4, r0
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf01      	itttt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	e7ed      	b.n	80009e2 <_free_r+0x1e>
 8000a06:	461a      	mov	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b10b      	cbz	r3, 8000a10 <_free_r+0x4c>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d9fa      	bls.n	8000a06 <_free_r+0x42>
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	1850      	adds	r0, r2, r1
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d10b      	bne.n	8000a30 <_free_r+0x6c>
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	4401      	add	r1, r0
 8000a1c:	1850      	adds	r0, r2, r1
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	d1e0      	bne.n	80009e6 <_free_r+0x22>
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	4408      	add	r0, r1
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	e7da      	b.n	80009e6 <_free_r+0x22>
 8000a30:	d902      	bls.n	8000a38 <_free_r+0x74>
 8000a32:	230c      	movs	r3, #12
 8000a34:	602b      	str	r3, [r5, #0]
 8000a36:	e7d6      	b.n	80009e6 <_free_r+0x22>
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	1821      	adds	r1, r4, r0
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	bf04      	itt	eq
 8000a40:	6819      	ldreq	r1, [r3, #0]
 8000a42:	685b      	ldreq	r3, [r3, #4]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	bf04      	itt	eq
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	6054      	str	r4, [r2, #4]
 8000a4e:	e7ca      	b.n	80009e6 <_free_r+0x22>
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	200001b8 	.word	0x200001b8

08000a58 <sbrk_aligned>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a98 <sbrk_aligned+0x40>)
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	6831      	ldr	r1, [r6, #0]
 8000a60:	4605      	mov	r5, r0
 8000a62:	b911      	cbnz	r1, 8000a6a <sbrk_aligned+0x12>
 8000a64:	f000 fba6 	bl	80011b4 <_sbrk_r>
 8000a68:	6030      	str	r0, [r6, #0]
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 fba1 	bl	80011b4 <_sbrk_r>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	d103      	bne.n	8000a7e <sbrk_aligned+0x26>
 8000a76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d0f8      	beq.n	8000a7a <sbrk_aligned+0x22>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fb92 	bl	80011b4 <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1f2      	bne.n	8000a7a <sbrk_aligned+0x22>
 8000a94:	e7ef      	b.n	8000a76 <sbrk_aligned+0x1e>
 8000a96:	bf00      	nop
 8000a98:	200001b4 	.word	0x200001b4

08000a9c <_malloc_r>:
 8000a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa0:	1ccd      	adds	r5, r1, #3
 8000aa2:	f025 0503 	bic.w	r5, r5, #3
 8000aa6:	3508      	adds	r5, #8
 8000aa8:	2d0c      	cmp	r5, #12
 8000aaa:	bf38      	it	cc
 8000aac:	250c      	movcc	r5, #12
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	db01      	blt.n	8000ab8 <_malloc_r+0x1c>
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	d904      	bls.n	8000ac2 <_malloc_r+0x26>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6033      	str	r3, [r6, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b98 <_malloc_r+0xfc>
 8000ac6:	f000 f869 	bl	8000b9c <__malloc_lock>
 8000aca:	f8d8 3000 	ldr.w	r3, [r8]
 8000ace:	461c      	mov	r4, r3
 8000ad0:	bb44      	cbnz	r4, 8000b24 <_malloc_r+0x88>
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbf 	bl	8000a58 <sbrk_aligned>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	4604      	mov	r4, r0
 8000ade:	d158      	bne.n	8000b92 <_malloc_r+0xf6>
 8000ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ae4:	4627      	mov	r7, r4
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d143      	bne.n	8000b72 <_malloc_r+0xd6>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d04b      	beq.n	8000b86 <_malloc_r+0xea>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4639      	mov	r1, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	eb04 0903 	add.w	r9, r4, r3
 8000af8:	f000 fb5c 	bl	80011b4 <_sbrk_r>
 8000afc:	4581      	cmp	r9, r0
 8000afe:	d142      	bne.n	8000b86 <_malloc_r+0xea>
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	1a6d      	subs	r5, r5, r1
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa6 	bl	8000a58 <sbrk_aligned>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d03a      	beq.n	8000b86 <_malloc_r+0xea>
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	442b      	add	r3, r5
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	bb62      	cbnz	r2, 8000b78 <_malloc_r+0xdc>
 8000b1e:	f8c8 7000 	str.w	r7, [r8]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xa8>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d420      	bmi.n	8000b6c <_malloc_r+0xd0>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xc2>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f82f 	bl	8000ba8 <__malloc_unlock>
 8000b4a:	f104 000b 	add.w	r0, r4, #11
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	f020 0007 	bic.w	r0, r0, #7
 8000b54:	1ac2      	subs	r2, r0, r3
 8000b56:	bf1c      	itt	ne
 8000b58:	1a1b      	subne	r3, r3, r0
 8000b5a:	50a3      	strne	r3, [r4, r2]
 8000b5c:	e7af      	b.n	8000abe <_malloc_r+0x22>
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	bf0c      	ite	eq
 8000b64:	f8c8 2000 	streq.w	r2, [r8]
 8000b68:	605a      	strne	r2, [r3, #4]
 8000b6a:	e7eb      	b.n	8000b44 <_malloc_r+0xa8>
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	6864      	ldr	r4, [r4, #4]
 8000b70:	e7ae      	b.n	8000ad0 <_malloc_r+0x34>
 8000b72:	463c      	mov	r4, r7
 8000b74:	687f      	ldr	r7, [r7, #4]
 8000b76:	e7b6      	b.n	8000ae6 <_malloc_r+0x4a>
 8000b78:	461a      	mov	r2, r3
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d1fb      	bne.n	8000b78 <_malloc_r+0xdc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6053      	str	r3, [r2, #4]
 8000b84:	e7de      	b.n	8000b44 <_malloc_r+0xa8>
 8000b86:	230c      	movs	r3, #12
 8000b88:	6033      	str	r3, [r6, #0]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f80c 	bl	8000ba8 <__malloc_unlock>
 8000b90:	e794      	b.n	8000abc <_malloc_r+0x20>
 8000b92:	6005      	str	r5, [r0, #0]
 8000b94:	e7d6      	b.n	8000b44 <_malloc_r+0xa8>
 8000b96:	bf00      	nop
 8000b98:	200001b8 	.word	0x200001b8

08000b9c <__malloc_lock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	@ (8000ba4 <__malloc_lock+0x8>)
 8000b9e:	f7ff bf0f 	b.w	80009c0 <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001b0 	.word	0x200001b0

08000ba8 <__malloc_unlock>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	@ (8000bb0 <__malloc_unlock+0x8>)
 8000baa:	f7ff bf0a 	b.w	80009c2 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200001b0 	.word	0x200001b0

08000bb4 <__ssputs_r>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	688e      	ldr	r6, [r1, #8]
 8000bba:	461f      	mov	r7, r3
 8000bbc:	42be      	cmp	r6, r7
 8000bbe:	680b      	ldr	r3, [r1, #0]
 8000bc0:	4682      	mov	sl, r0
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	d82d      	bhi.n	8000c24 <__ssputs_r+0x70>
 8000bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000bd0:	d026      	beq.n	8000c20 <__ssputs_r+0x6c>
 8000bd2:	6965      	ldr	r5, [r4, #20]
 8000bd4:	6909      	ldr	r1, [r1, #16]
 8000bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bda:	eba3 0901 	sub.w	r9, r3, r1
 8000bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000be2:	1c7b      	adds	r3, r7, #1
 8000be4:	444b      	add	r3, r9
 8000be6:	106d      	asrs	r5, r5, #1
 8000be8:	429d      	cmp	r5, r3
 8000bea:	bf38      	it	cc
 8000bec:	461d      	movcc	r5, r3
 8000bee:	0553      	lsls	r3, r2, #21
 8000bf0:	d527      	bpl.n	8000c42 <__ssputs_r+0x8e>
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	f7ff ff52 	bl	8000a9c <_malloc_r>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	b360      	cbz	r0, 8000c56 <__ssputs_r+0xa2>
 8000bfc:	6921      	ldr	r1, [r4, #16]
 8000bfe:	464a      	mov	r2, r9
 8000c00:	f000 fae8 	bl	80011d4 <memcpy>
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0e:	81a3      	strh	r3, [r4, #12]
 8000c10:	6126      	str	r6, [r4, #16]
 8000c12:	6165      	str	r5, [r4, #20]
 8000c14:	444e      	add	r6, r9
 8000c16:	eba5 0509 	sub.w	r5, r5, r9
 8000c1a:	6026      	str	r6, [r4, #0]
 8000c1c:	60a5      	str	r5, [r4, #8]
 8000c1e:	463e      	mov	r6, r7
 8000c20:	42be      	cmp	r6, r7
 8000c22:	d900      	bls.n	8000c26 <__ssputs_r+0x72>
 8000c24:	463e      	mov	r6, r7
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	4632      	mov	r2, r6
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	f000 faa8 	bl	8001180 <memmove>
 8000c30:	68a3      	ldr	r3, [r4, #8]
 8000c32:	1b9b      	subs	r3, r3, r6
 8000c34:	60a3      	str	r3, [r4, #8]
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	4433      	add	r3, r6
 8000c3a:	6023      	str	r3, [r4, #0]
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	462a      	mov	r2, r5
 8000c44:	f000 fad4 	bl	80011f0 <_realloc_r>
 8000c48:	4606      	mov	r6, r0
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d1e0      	bne.n	8000c10 <__ssputs_r+0x5c>
 8000c4e:	6921      	ldr	r1, [r4, #16]
 8000c50:	4650      	mov	r0, sl
 8000c52:	f7ff feb7 	bl	80009c4 <_free_r>
 8000c56:	230c      	movs	r3, #12
 8000c58:	f8ca 3000 	str.w	r3, [sl]
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c68:	e7e9      	b.n	8000c3e <__ssputs_r+0x8a>
	...

08000c6c <_svfiprintf_r>:
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c70:	4698      	mov	r8, r3
 8000c72:	898b      	ldrh	r3, [r1, #12]
 8000c74:	061b      	lsls	r3, r3, #24
 8000c76:	b09d      	sub	sp, #116	@ 0x74
 8000c78:	4607      	mov	r7, r0
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4614      	mov	r4, r2
 8000c7e:	d510      	bpl.n	8000ca2 <_svfiprintf_r+0x36>
 8000c80:	690b      	ldr	r3, [r1, #16]
 8000c82:	b973      	cbnz	r3, 8000ca2 <_svfiprintf_r+0x36>
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f7ff ff09 	bl	8000a9c <_malloc_r>
 8000c8a:	6028      	str	r0, [r5, #0]
 8000c8c:	6128      	str	r0, [r5, #16]
 8000c8e:	b930      	cbnz	r0, 8000c9e <_svfiprintf_r+0x32>
 8000c90:	230c      	movs	r3, #12
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c98:	b01d      	add	sp, #116	@ 0x74
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	616b      	str	r3, [r5, #20]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cb0:	2330      	movs	r3, #48	@ 0x30
 8000cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000e50 <_svfiprintf_r+0x1e4>
 8000cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cba:	f04f 0901 	mov.w	r9, #1
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cc6:	b10a      	cbz	r2, 8000ccc <_svfiprintf_r+0x60>
 8000cc8:	2a25      	cmp	r2, #37	@ 0x25
 8000cca:	d1f9      	bne.n	8000cc0 <_svfiprintf_r+0x54>
 8000ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8000cd0:	d00b      	beq.n	8000cea <_svfiprintf_r+0x7e>
 8000cd2:	465b      	mov	r3, fp
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	4638      	mov	r0, r7
 8000cda:	f7ff ff6b 	bl	8000bb4 <__ssputs_r>
 8000cde:	3001      	adds	r0, #1
 8000ce0:	f000 80a7 	beq.w	8000e32 <_svfiprintf_r+0x1c6>
 8000ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ce6:	445a      	add	r2, fp
 8000ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cea:	f89a 3000 	ldrb.w	r3, [sl]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 809f 	beq.w	8000e32 <_svfiprintf_r+0x1c6>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cfe:	f10a 0a01 	add.w	sl, sl, #1
 8000d02:	9304      	str	r3, [sp, #16]
 8000d04:	9307      	str	r3, [sp, #28]
 8000d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d0c:	4654      	mov	r4, sl
 8000d0e:	2205      	movs	r2, #5
 8000d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d14:	484e      	ldr	r0, [pc, #312]	@ (8000e50 <_svfiprintf_r+0x1e4>)
 8000d16:	f7ff fa5b 	bl	80001d0 <memchr>
 8000d1a:	9a04      	ldr	r2, [sp, #16]
 8000d1c:	b9d8      	cbnz	r0, 8000d56 <_svfiprintf_r+0xea>
 8000d1e:	06d0      	lsls	r0, r2, #27
 8000d20:	bf44      	itt	mi
 8000d22:	2320      	movmi	r3, #32
 8000d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d28:	0711      	lsls	r1, r2, #28
 8000d2a:	bf44      	itt	mi
 8000d2c:	232b      	movmi	r3, #43	@ 0x2b
 8000d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d32:	f89a 3000 	ldrb.w	r3, [sl]
 8000d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d38:	d015      	beq.n	8000d66 <_svfiprintf_r+0xfa>
 8000d3a:	9a07      	ldr	r2, [sp, #28]
 8000d3c:	4654      	mov	r4, sl
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f04f 0c0a 	mov.w	ip, #10
 8000d44:	4621      	mov	r1, r4
 8000d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d4a:	3b30      	subs	r3, #48	@ 0x30
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d94b      	bls.n	8000de8 <_svfiprintf_r+0x17c>
 8000d50:	b1b0      	cbz	r0, 8000d80 <_svfiprintf_r+0x114>
 8000d52:	9207      	str	r2, [sp, #28]
 8000d54:	e014      	b.n	8000d80 <_svfiprintf_r+0x114>
 8000d56:	eba0 0308 	sub.w	r3, r0, r8
 8000d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	9304      	str	r3, [sp, #16]
 8000d62:	46a2      	mov	sl, r4
 8000d64:	e7d2      	b.n	8000d0c <_svfiprintf_r+0xa0>
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	1d19      	adds	r1, r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	9103      	str	r1, [sp, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfbb      	ittet	lt
 8000d72:	425b      	neglt	r3, r3
 8000d74:	f042 0202 	orrlt.w	r2, r2, #2
 8000d78:	9307      	strge	r3, [sp, #28]
 8000d7a:	9307      	strlt	r3, [sp, #28]
 8000d7c:	bfb8      	it	lt
 8000d7e:	9204      	strlt	r2, [sp, #16]
 8000d80:	7823      	ldrb	r3, [r4, #0]
 8000d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d84:	d10a      	bne.n	8000d9c <_svfiprintf_r+0x130>
 8000d86:	7863      	ldrb	r3, [r4, #1]
 8000d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d8a:	d132      	bne.n	8000df2 <_svfiprintf_r+0x186>
 8000d8c:	9b03      	ldr	r3, [sp, #12]
 8000d8e:	1d1a      	adds	r2, r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	9203      	str	r2, [sp, #12]
 8000d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d98:	3402      	adds	r4, #2
 8000d9a:	9305      	str	r3, [sp, #20]
 8000d9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000e54 <_svfiprintf_r+0x1e8>
 8000da0:	7821      	ldrb	r1, [r4, #0]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4650      	mov	r0, sl
 8000da6:	f7ff fa13 	bl	80001d0 <memchr>
 8000daa:	b138      	cbz	r0, 8000dbc <_svfiprintf_r+0x150>
 8000dac:	9b04      	ldr	r3, [sp, #16]
 8000dae:	eba0 000a 	sub.w	r0, r0, sl
 8000db2:	2240      	movs	r2, #64	@ 0x40
 8000db4:	4082      	lsls	r2, r0
 8000db6:	4313      	orrs	r3, r2
 8000db8:	3401      	adds	r4, #1
 8000dba:	9304      	str	r3, [sp, #16]
 8000dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc0:	4825      	ldr	r0, [pc, #148]	@ (8000e58 <_svfiprintf_r+0x1ec>)
 8000dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	f7ff fa02 	bl	80001d0 <memchr>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d036      	beq.n	8000e3e <_svfiprintf_r+0x1d2>
 8000dd0:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <_svfiprintf_r+0x1f0>)
 8000dd2:	bb1b      	cbnz	r3, 8000e1c <_svfiprintf_r+0x1b0>
 8000dd4:	9b03      	ldr	r3, [sp, #12]
 8000dd6:	3307      	adds	r3, #7
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
 8000ddc:	3308      	adds	r3, #8
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000de2:	4433      	add	r3, r6
 8000de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000de6:	e76a      	b.n	8000cbe <_svfiprintf_r+0x52>
 8000de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dec:	460c      	mov	r4, r1
 8000dee:	2001      	movs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <_svfiprintf_r+0xd8>
 8000df2:	2300      	movs	r3, #0
 8000df4:	3401      	adds	r4, #1
 8000df6:	9305      	str	r3, [sp, #20]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 0c0a 	mov.w	ip, #10
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e04:	3a30      	subs	r2, #48	@ 0x30
 8000e06:	2a09      	cmp	r2, #9
 8000e08:	d903      	bls.n	8000e12 <_svfiprintf_r+0x1a6>
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0c6      	beq.n	8000d9c <_svfiprintf_r+0x130>
 8000e0e:	9105      	str	r1, [sp, #20]
 8000e10:	e7c4      	b.n	8000d9c <_svfiprintf_r+0x130>
 8000e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e16:	4604      	mov	r4, r0
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e7f0      	b.n	8000dfe <_svfiprintf_r+0x192>
 8000e1c:	ab03      	add	r3, sp, #12
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	462a      	mov	r2, r5
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <_svfiprintf_r+0x1f4>)
 8000e24:	a904      	add	r1, sp, #16
 8000e26:	4638      	mov	r0, r7
 8000e28:	f3af 8000 	nop.w
 8000e2c:	1c42      	adds	r2, r0, #1
 8000e2e:	4606      	mov	r6, r0
 8000e30:	d1d6      	bne.n	8000de0 <_svfiprintf_r+0x174>
 8000e32:	89ab      	ldrh	r3, [r5, #12]
 8000e34:	065b      	lsls	r3, r3, #25
 8000e36:	f53f af2d 	bmi.w	8000c94 <_svfiprintf_r+0x28>
 8000e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e3c:	e72c      	b.n	8000c98 <_svfiprintf_r+0x2c>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <_svfiprintf_r+0x1f4>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4638      	mov	r0, r7
 8000e4a:	f000 f879 	bl	8000f40 <_printf_i>
 8000e4e:	e7ed      	b.n	8000e2c <_svfiprintf_r+0x1c0>
 8000e50:	080012c7 	.word	0x080012c7
 8000e54:	080012cd 	.word	0x080012cd
 8000e58:	080012d1 	.word	0x080012d1
 8000e5c:	00000000 	.word	0x00000000
 8000e60:	08000bb5 	.word	0x08000bb5

08000e64 <_printf_common>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4616      	mov	r6, r2
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	690b      	ldr	r3, [r1, #16]
 8000e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bfb8      	it	lt
 8000e78:	4613      	movlt	r3, r2
 8000e7a:	6033      	str	r3, [r6, #0]
 8000e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e80:	4607      	mov	r7, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b10a      	cbz	r2, 8000e8a <_printf_common+0x26>
 8000e86:	3301      	adds	r3, #1
 8000e88:	6033      	str	r3, [r6, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	bf42      	ittt	mi
 8000e90:	6833      	ldrmi	r3, [r6, #0]
 8000e92:	3302      	addmi	r3, #2
 8000e94:	6033      	strmi	r3, [r6, #0]
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f015 0506 	ands.w	r5, r5, #6
 8000e9c:	d106      	bne.n	8000eac <_printf_common+0x48>
 8000e9e:	f104 0a19 	add.w	sl, r4, #25
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dc26      	bgt.n	8000efa <_printf_common+0x96>
 8000eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	3b00      	subs	r3, #0
 8000eb4:	bf18      	it	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	0692      	lsls	r2, r2, #26
 8000eba:	d42b      	bmi.n	8000f14 <_printf_common+0xb0>
 8000ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c8      	blx	r9
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d01e      	beq.n	8000f08 <_printf_common+0xa4>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6922      	ldr	r2, [r4, #16]
 8000ece:	f003 0306 	and.w	r3, r3, #6
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf02      	ittt	eq
 8000ed6:	68e5      	ldreq	r5, [r4, #12]
 8000ed8:	6833      	ldreq	r3, [r6, #0]
 8000eda:	1aed      	subeq	r5, r5, r3
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	bf0c      	ite	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	2500      	movne	r5, #0
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfc4      	itt	gt
 8000eea:	1a9b      	subgt	r3, r3, r2
 8000eec:	18ed      	addgt	r5, r5, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	341a      	adds	r4, #26
 8000ef2:	42b5      	cmp	r5, r6
 8000ef4:	d11a      	bne.n	8000f2c <_printf_common+0xc8>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e008      	b.n	8000f0c <_printf_common+0xa8>
 8000efa:	2301      	movs	r3, #1
 8000efc:	4652      	mov	r2, sl
 8000efe:	4641      	mov	r1, r8
 8000f00:	4638      	mov	r0, r7
 8000f02:	47c8      	blx	r9
 8000f04:	3001      	adds	r0, #1
 8000f06:	d103      	bne.n	8000f10 <_printf_common+0xac>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7c6      	b.n	8000ea2 <_printf_common+0x3e>
 8000f14:	18e1      	adds	r1, r4, r3
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	2030      	movs	r0, #48	@ 0x30
 8000f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f1e:	4422      	add	r2, r4
 8000f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f28:	3302      	adds	r3, #2
 8000f2a:	e7c7      	b.n	8000ebc <_printf_common+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4641      	mov	r1, r8
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c8      	blx	r9
 8000f36:	3001      	adds	r0, #1
 8000f38:	d0e6      	beq.n	8000f08 <_printf_common+0xa4>
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7d9      	b.n	8000ef2 <_printf_common+0x8e>
	...

08000f40 <_printf_i>:
 8000f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	7e0f      	ldrb	r7, [r1, #24]
 8000f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f48:	2f78      	cmp	r7, #120	@ 0x78
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	469a      	mov	sl, r3
 8000f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f56:	d807      	bhi.n	8000f68 <_printf_i+0x28>
 8000f58:	2f62      	cmp	r7, #98	@ 0x62
 8000f5a:	d80a      	bhi.n	8000f72 <_printf_i+0x32>
 8000f5c:	2f00      	cmp	r7, #0
 8000f5e:	f000 80d2 	beq.w	8001106 <_printf_i+0x1c6>
 8000f62:	2f58      	cmp	r7, #88	@ 0x58
 8000f64:	f000 80b9 	beq.w	80010da <_printf_i+0x19a>
 8000f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f70:	e03a      	b.n	8000fe8 <_printf_i+0xa8>
 8000f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f76:	2b15      	cmp	r3, #21
 8000f78:	d8f6      	bhi.n	8000f68 <_printf_i+0x28>
 8000f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f80 <_printf_i+0x40>)
 8000f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f80:	08000fd9 	.word	0x08000fd9
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000f69 	.word	0x08000f69
 8000f8c:	08000f69 	.word	0x08000f69
 8000f90:	08000f69 	.word	0x08000f69
 8000f94:	08000f69 	.word	0x08000f69
 8000f98:	08000fed 	.word	0x08000fed
 8000f9c:	08000f69 	.word	0x08000f69
 8000fa0:	08000f69 	.word	0x08000f69
 8000fa4:	08000f69 	.word	0x08000f69
 8000fa8:	08000f69 	.word	0x08000f69
 8000fac:	080010ed 	.word	0x080010ed
 8000fb0:	08001017 	.word	0x08001017
 8000fb4:	080010a7 	.word	0x080010a7
 8000fb8:	08000f69 	.word	0x08000f69
 8000fbc:	08000f69 	.word	0x08000f69
 8000fc0:	0800110f 	.word	0x0800110f
 8000fc4:	08000f69 	.word	0x08000f69
 8000fc8:	08001017 	.word	0x08001017
 8000fcc:	08000f69 	.word	0x08000f69
 8000fd0:	08000f69 	.word	0x08000f69
 8000fd4:	080010af 	.word	0x080010af
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6032      	str	r2, [r6, #0]
 8000fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e09d      	b.n	8001128 <_printf_i+0x1e8>
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	1d19      	adds	r1, r3, #4
 8000ff2:	6031      	str	r1, [r6, #0]
 8000ff4:	0606      	lsls	r6, r0, #24
 8000ff6:	d501      	bpl.n	8000ffc <_printf_i+0xbc>
 8000ff8:	681d      	ldr	r5, [r3, #0]
 8000ffa:	e003      	b.n	8001004 <_printf_i+0xc4>
 8000ffc:	0645      	lsls	r5, r0, #25
 8000ffe:	d5fb      	bpl.n	8000ff8 <_printf_i+0xb8>
 8001000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001004:	2d00      	cmp	r5, #0
 8001006:	da03      	bge.n	8001010 <_printf_i+0xd0>
 8001008:	232d      	movs	r3, #45	@ 0x2d
 800100a:	426d      	negs	r5, r5
 800100c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001010:	4859      	ldr	r0, [pc, #356]	@ (8001178 <_printf_i+0x238>)
 8001012:	230a      	movs	r3, #10
 8001014:	e011      	b.n	800103a <_printf_i+0xfa>
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	0608      	lsls	r0, r1, #24
 800101c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001020:	d402      	bmi.n	8001028 <_printf_i+0xe8>
 8001022:	0649      	lsls	r1, r1, #25
 8001024:	bf48      	it	mi
 8001026:	b2ad      	uxthmi	r5, r5
 8001028:	2f6f      	cmp	r7, #111	@ 0x6f
 800102a:	4853      	ldr	r0, [pc, #332]	@ (8001178 <_printf_i+0x238>)
 800102c:	6033      	str	r3, [r6, #0]
 800102e:	bf14      	ite	ne
 8001030:	230a      	movne	r3, #10
 8001032:	2308      	moveq	r3, #8
 8001034:	2100      	movs	r1, #0
 8001036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800103a:	6866      	ldr	r6, [r4, #4]
 800103c:	60a6      	str	r6, [r4, #8]
 800103e:	2e00      	cmp	r6, #0
 8001040:	bfa2      	ittt	ge
 8001042:	6821      	ldrge	r1, [r4, #0]
 8001044:	f021 0104 	bicge.w	r1, r1, #4
 8001048:	6021      	strge	r1, [r4, #0]
 800104a:	b90d      	cbnz	r5, 8001050 <_printf_i+0x110>
 800104c:	2e00      	cmp	r6, #0
 800104e:	d04b      	beq.n	80010e8 <_printf_i+0x1a8>
 8001050:	4616      	mov	r6, r2
 8001052:	fbb5 f1f3 	udiv	r1, r5, r3
 8001056:	fb03 5711 	mls	r7, r3, r1, r5
 800105a:	5dc7      	ldrb	r7, [r0, r7]
 800105c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001060:	462f      	mov	r7, r5
 8001062:	42bb      	cmp	r3, r7
 8001064:	460d      	mov	r5, r1
 8001066:	d9f4      	bls.n	8001052 <_printf_i+0x112>
 8001068:	2b08      	cmp	r3, #8
 800106a:	d10b      	bne.n	8001084 <_printf_i+0x144>
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	07df      	lsls	r7, r3, #31
 8001070:	d508      	bpl.n	8001084 <_printf_i+0x144>
 8001072:	6923      	ldr	r3, [r4, #16]
 8001074:	6861      	ldr	r1, [r4, #4]
 8001076:	4299      	cmp	r1, r3
 8001078:	bfde      	ittt	le
 800107a:	2330      	movle	r3, #48	@ 0x30
 800107c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001080:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001084:	1b92      	subs	r2, r2, r6
 8001086:	6122      	str	r2, [r4, #16]
 8001088:	f8cd a000 	str.w	sl, [sp]
 800108c:	464b      	mov	r3, r9
 800108e:	aa03      	add	r2, sp, #12
 8001090:	4621      	mov	r1, r4
 8001092:	4640      	mov	r0, r8
 8001094:	f7ff fee6 	bl	8000e64 <_printf_common>
 8001098:	3001      	adds	r0, #1
 800109a:	d14a      	bne.n	8001132 <_printf_i+0x1f2>
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a0:	b004      	add	sp, #16
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	6023      	str	r3, [r4, #0]
 80010ae:	4833      	ldr	r0, [pc, #204]	@ (800117c <_printf_i+0x23c>)
 80010b0:	2778      	movs	r7, #120	@ 0x78
 80010b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	6831      	ldr	r1, [r6, #0]
 80010ba:	061f      	lsls	r7, r3, #24
 80010bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80010c0:	d402      	bmi.n	80010c8 <_printf_i+0x188>
 80010c2:	065f      	lsls	r7, r3, #25
 80010c4:	bf48      	it	mi
 80010c6:	b2ad      	uxthmi	r5, r5
 80010c8:	6031      	str	r1, [r6, #0]
 80010ca:	07d9      	lsls	r1, r3, #31
 80010cc:	bf44      	itt	mi
 80010ce:	f043 0320 	orrmi.w	r3, r3, #32
 80010d2:	6023      	strmi	r3, [r4, #0]
 80010d4:	b11d      	cbz	r5, 80010de <_printf_i+0x19e>
 80010d6:	2310      	movs	r3, #16
 80010d8:	e7ac      	b.n	8001034 <_printf_i+0xf4>
 80010da:	4827      	ldr	r0, [pc, #156]	@ (8001178 <_printf_i+0x238>)
 80010dc:	e7e9      	b.n	80010b2 <_printf_i+0x172>
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	f023 0320 	bic.w	r3, r3, #32
 80010e4:	6023      	str	r3, [r4, #0]
 80010e6:	e7f6      	b.n	80010d6 <_printf_i+0x196>
 80010e8:	4616      	mov	r6, r2
 80010ea:	e7bd      	b.n	8001068 <_printf_i+0x128>
 80010ec:	6833      	ldr	r3, [r6, #0]
 80010ee:	6825      	ldr	r5, [r4, #0]
 80010f0:	6961      	ldr	r1, [r4, #20]
 80010f2:	1d18      	adds	r0, r3, #4
 80010f4:	6030      	str	r0, [r6, #0]
 80010f6:	062e      	lsls	r6, r5, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	d501      	bpl.n	8001100 <_printf_i+0x1c0>
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	e002      	b.n	8001106 <_printf_i+0x1c6>
 8001100:	0668      	lsls	r0, r5, #25
 8001102:	d5fb      	bpl.n	80010fc <_printf_i+0x1bc>
 8001104:	8019      	strh	r1, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6123      	str	r3, [r4, #16]
 800110a:	4616      	mov	r6, r2
 800110c:	e7bc      	b.n	8001088 <_printf_i+0x148>
 800110e:	6833      	ldr	r3, [r6, #0]
 8001110:	1d1a      	adds	r2, r3, #4
 8001112:	6032      	str	r2, [r6, #0]
 8001114:	681e      	ldr	r6, [r3, #0]
 8001116:	6862      	ldr	r2, [r4, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	4630      	mov	r0, r6
 800111c:	f7ff f858 	bl	80001d0 <memchr>
 8001120:	b108      	cbz	r0, 8001126 <_printf_i+0x1e6>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	6060      	str	r0, [r4, #4]
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	6123      	str	r3, [r4, #16]
 800112a:	2300      	movs	r3, #0
 800112c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001130:	e7aa      	b.n	8001088 <_printf_i+0x148>
 8001132:	6923      	ldr	r3, [r4, #16]
 8001134:	4632      	mov	r2, r6
 8001136:	4649      	mov	r1, r9
 8001138:	4640      	mov	r0, r8
 800113a:	47d0      	blx	sl
 800113c:	3001      	adds	r0, #1
 800113e:	d0ad      	beq.n	800109c <_printf_i+0x15c>
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	079b      	lsls	r3, r3, #30
 8001144:	d413      	bmi.n	800116e <_printf_i+0x22e>
 8001146:	68e0      	ldr	r0, [r4, #12]
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	4298      	cmp	r0, r3
 800114c:	bfb8      	it	lt
 800114e:	4618      	movlt	r0, r3
 8001150:	e7a6      	b.n	80010a0 <_printf_i+0x160>
 8001152:	2301      	movs	r3, #1
 8001154:	4632      	mov	r2, r6
 8001156:	4649      	mov	r1, r9
 8001158:	4640      	mov	r0, r8
 800115a:	47d0      	blx	sl
 800115c:	3001      	adds	r0, #1
 800115e:	d09d      	beq.n	800109c <_printf_i+0x15c>
 8001160:	3501      	adds	r5, #1
 8001162:	68e3      	ldr	r3, [r4, #12]
 8001164:	9903      	ldr	r1, [sp, #12]
 8001166:	1a5b      	subs	r3, r3, r1
 8001168:	42ab      	cmp	r3, r5
 800116a:	dcf2      	bgt.n	8001152 <_printf_i+0x212>
 800116c:	e7eb      	b.n	8001146 <_printf_i+0x206>
 800116e:	2500      	movs	r5, #0
 8001170:	f104 0619 	add.w	r6, r4, #25
 8001174:	e7f5      	b.n	8001162 <_printf_i+0x222>
 8001176:	bf00      	nop
 8001178:	080012d8 	.word	0x080012d8
 800117c:	080012e9 	.word	0x080012e9

08001180 <memmove>:
 8001180:	4288      	cmp	r0, r1
 8001182:	b510      	push	{r4, lr}
 8001184:	eb01 0402 	add.w	r4, r1, r2
 8001188:	d902      	bls.n	8001190 <memmove+0x10>
 800118a:	4284      	cmp	r4, r0
 800118c:	4623      	mov	r3, r4
 800118e:	d807      	bhi.n	80011a0 <memmove+0x20>
 8001190:	1e43      	subs	r3, r0, #1
 8001192:	42a1      	cmp	r1, r4
 8001194:	d008      	beq.n	80011a8 <memmove+0x28>
 8001196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800119a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800119e:	e7f8      	b.n	8001192 <memmove+0x12>
 80011a0:	4402      	add	r2, r0
 80011a2:	4601      	mov	r1, r0
 80011a4:	428a      	cmp	r2, r1
 80011a6:	d100      	bne.n	80011aa <memmove+0x2a>
 80011a8:	bd10      	pop	{r4, pc}
 80011aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011b2:	e7f7      	b.n	80011a4 <memmove+0x24>

080011b4 <_sbrk_r>:
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4d06      	ldr	r5, [pc, #24]	@ (80011d0 <_sbrk_r+0x1c>)
 80011b8:	2300      	movs	r3, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	602b      	str	r3, [r5, #0]
 80011c0:	f7ff fa7e 	bl	80006c0 <_sbrk>
 80011c4:	1c43      	adds	r3, r0, #1
 80011c6:	d102      	bne.n	80011ce <_sbrk_r+0x1a>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	b103      	cbz	r3, 80011ce <_sbrk_r+0x1a>
 80011cc:	6023      	str	r3, [r4, #0]
 80011ce:	bd38      	pop	{r3, r4, r5, pc}
 80011d0:	200001ac 	.word	0x200001ac

080011d4 <memcpy>:
 80011d4:	440a      	add	r2, r1
 80011d6:	4291      	cmp	r1, r2
 80011d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80011dc:	d100      	bne.n	80011e0 <memcpy+0xc>
 80011de:	4770      	bx	lr
 80011e0:	b510      	push	{r4, lr}
 80011e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011ea:	4291      	cmp	r1, r2
 80011ec:	d1f9      	bne.n	80011e2 <memcpy+0xe>
 80011ee:	bd10      	pop	{r4, pc}

080011f0 <_realloc_r>:
 80011f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f4:	4680      	mov	r8, r0
 80011f6:	4615      	mov	r5, r2
 80011f8:	460c      	mov	r4, r1
 80011fa:	b921      	cbnz	r1, 8001206 <_realloc_r+0x16>
 80011fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001200:	4611      	mov	r1, r2
 8001202:	f7ff bc4b 	b.w	8000a9c <_malloc_r>
 8001206:	b92a      	cbnz	r2, 8001214 <_realloc_r+0x24>
 8001208:	f7ff fbdc 	bl	80009c4 <_free_r>
 800120c:	2400      	movs	r4, #0
 800120e:	4620      	mov	r0, r4
 8001210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001214:	f000 f81a 	bl	800124c <_malloc_usable_size_r>
 8001218:	4285      	cmp	r5, r0
 800121a:	4606      	mov	r6, r0
 800121c:	d802      	bhi.n	8001224 <_realloc_r+0x34>
 800121e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001222:	d8f4      	bhi.n	800120e <_realloc_r+0x1e>
 8001224:	4629      	mov	r1, r5
 8001226:	4640      	mov	r0, r8
 8001228:	f7ff fc38 	bl	8000a9c <_malloc_r>
 800122c:	4607      	mov	r7, r0
 800122e:	2800      	cmp	r0, #0
 8001230:	d0ec      	beq.n	800120c <_realloc_r+0x1c>
 8001232:	42b5      	cmp	r5, r6
 8001234:	462a      	mov	r2, r5
 8001236:	4621      	mov	r1, r4
 8001238:	bf28      	it	cs
 800123a:	4632      	movcs	r2, r6
 800123c:	f7ff ffca 	bl	80011d4 <memcpy>
 8001240:	4621      	mov	r1, r4
 8001242:	4640      	mov	r0, r8
 8001244:	f7ff fbbe 	bl	80009c4 <_free_r>
 8001248:	463c      	mov	r4, r7
 800124a:	e7e0      	b.n	800120e <_realloc_r+0x1e>

0800124c <_malloc_usable_size_r>:
 800124c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001250:	1f18      	subs	r0, r3, #4
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfbc      	itt	lt
 8001256:	580b      	ldrlt	r3, [r1, r0]
 8001258:	18c0      	addlt	r0, r0, r3
 800125a:	4770      	bx	lr

0800125c <_init>:
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	bf00      	nop
 8001260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001262:	bc08      	pop	{r3}
 8001264:	469e      	mov	lr, r3
 8001266:	4770      	bx	lr

08001268 <_fini>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr
